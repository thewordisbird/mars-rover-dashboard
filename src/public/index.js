// DOM Components and event listeners -----------------------------------
const root = document.getElementById('root');

// Event delegation for click event in root div
root.addEventListener('click', async event => {
    /**
     * @description Click even delegation for dynamically generated elements in the roor div.
     * @param event (obj): The event object generated by the click.
    */
    if (event.target.className.includes('camera-filter-item') ) {
        // Handle camera filter click events.
        const prevFilter = getCam();
        const prevFilterElement = document.getElementById(prevFilter);
        prevFilterElement.classList.remove('active');
        
        const currentFilterItem = event.target;
        currentFilterItem.classList.add('active');
        
        const camera = event.target.id;
        
        const photos = await fetchData('/photos', {
            rover_name: getRoverName(),
            sol: getSol(),
            page: 1,
            camera: camera
        });

        // Update Store
        pushToStore(setCamera(camera), setPhotos(photos), updateNextPage(photos.length));
     
        // Render photos.
        renderPhotos(true);
        
    } else if (event.target.classList.contains('rover-link-landing')) {
        // Handle navigation click events. (Selecting a rover from the navbar).
        window.location.hash = event.target.value;
    }
});

window.addEventListener('scroll', async () => {
    /**
     * @description Query next page of photos for the current app state when the user scrolls to the bottom of the page.
    */
    const pageBottom = document.body.scrollHeight - window.innerHeight;
    if (document.body.scrollTop === pageBottom || document.documentElement.scrollTop === pageBottom) {
        if (getNextPage()) {
            // If the nextPage value is valid query backend for photos
            const photos = await fetchData('/photos', {
                rover_name: getRoverName(),
                sol: getSol(),
                page: getNextPage(),
                camera: getCam()
            });

            // Update Store
            pushToStore(setPhotos(photos), updateNextPage(photos.length));

            // Render Photos appending new photos to current results.
            renderPhotos(false);
        }
    }
});

// Local state and route storage --------------------------------------------------
let store;
let routes;

const resetStore = () => {
    store = Immutable.Map({});
};

const resetRoutes = () => {
    routes = Immutable.Map({});
};

const applyUpdaters = (state, updaters) => {
    const startState = state;
    return updaters.reduce((newState, updater) => {
        return updater(newState);
    }, startState);
};
const pushToStore = (...updaters) => {
    store = applyUpdaters(store, updaters);
    return store;
};

const pushToRoutes = (...updaters) => {
    routes = applyUpdaters(routes, updaters);
    return routes;
};


// Immutable Modifier And Access Functions ------------------------------
const setState = (path, data, state) => {
    // modifies the state wit the supplied data
    return state.setIn(path, data);
};

const getState = (path, state) => {
    /**
     * @description Read the current state of the application.
     * @returns (immutable obj) - Application state.
    */
    return state.getIn(path);
};

const updateState = (path, updater, state) => {
    return state.updateIn(path, val => updater(val));
};

const mergeState = (data, state) => {
    return state.merge(data);
};

// App Modifier And Access Functions ------------------------------------
// Abstraction on Immutable Modifiers for specific modular tasks
const setStartState = () => {
    /**
     * @description Creates a new starting state
     * @returns (function) - Updater Function to create a new starting state
    */
    const data = ['Curiosity', 'Opportunity', 'Spirit'];
    return (state) => {
        return setState(['rovers'], Immutable.fromJS(data), state);
    };
};

const setManifestData = (data) => {
    const path = ['rover','data'];
    return (state) => {
        return setState(path, Immutable.fromJS(data), state);
    };
};

const setPhotosData = (data) => {
    const path = ['rover', 'photos'];
    return (state) => {
        return setState(path, Immutable.fromJS(data), state);
    };
};

const setPhotos = (data) => {
    const path = ['rover', 'photos', 'photos'];
    return (state) => {
        return setState(path, Immutable.fromJS(data), state);
    };
};

const setCamera = (camera) => {
    const path = ['rover', 'photos', 'camera'];
    return (state) => {
        return setState(path, Immutable.fromJS(camera), state);
    };
};

const setHomeRoute = () => {
    const path = ['#'];
    return (state) => {
        return setState(path, renderHome(), state);
    };
};

const setRoverRoutes = (rovers) => {
    /**
     * @description Creates route map for rovers
     * @returns (function) - Updater Function to create a route map for rovers
    */
    const data = rovers.reduce((acc, current) => {
        acc[`#${current.toLowerCase()}`] = renderRover(current);
        return acc;
    }, {});
    return (state) => {
        return mergeState(data, state);
    };
};


// Getters --------------------------------------------------------------
const getRovers = () => {
    const path = ['rovers'];
    return getState(path, store);
};

const getRover = () => {
    const path = ['rover', 'data', 'rover'];
    return getState(path, store);
};

const getRoverName = () => {
    const path = ['rover', 'data', 'rover', 'name'];
    return getState(path, store);
};
const getRoverCams = () => {
    const path = ['rover', 'data', 'rover', 'cameras'];
    return getState(path, store);
};

const getCam = () => {
    const path = ['rover', 'photos', 'camera'];
    return getState(path, store) || 'all';
};

const getPhotos = () => {
    const path = ['rover', 'photos', 'photos'];
    return getState(path, store);
};

const getSol = () => {
    const path = ['rover', 'data', 'rover', 'max_sol'];
    return getState(path, store);
};

const getNextPage = () => {
    const path = ['rover', 'photos', 'nextPage'];
    return getState(path, store);
};

// Updaters -------------------------------------------------------------
const updateNextPage = (photosCount) => {
    /**
     * @description Increments the nextPage field on the state by one
     * @returns (function) - Updater Function to return an updated state
    */
    const increment = 1;
    const path = ['rover', 'photos', 'nextPage'];
   
    return (state) => {
        return updateState(path, (val) => photosCount < 25 ? null: val + increment, state);
    };
};


// Render View Function -------------------------------------------------
const renderHome = () => {
    /**
     * @description Function to render the home view for a rover at a given state.
     * @returns (function) - Function that will render the home html string
    */
    return (state) => {
        return App(state);
    };
};

const renderRover = (rover) => {
    /**
     * @description Closure function to render the rover view for a rover at a given state.
     * @param (str) rover - The name of the rover to be rendered.
     * @returns (function) - Function that will render the rover html string for the given state.
    */
    return async (state) => {
        /**
         * @description Render html string for a given state
         * @param (immutable obj) state - The state of the application.
         * @returns (str) - html string for the view of the rover at the given state.
        */
        const manifestData = await fetchData('/manifest', {rover_name: rover});
        
        const photos = await fetchData('/photos', {
            rover_name: rover,
            sol: manifestData.rover.max_sol,
            camera: 'all',
            page: 1
        });

        const photosData = {
            camera: 'all',
            photos: photos,
            nextPage: 2
        };

        // Set state to store.
        pushToStore(setManifestData(manifestData), setPhotosData(photosData));
        
        return App();
    };
};

const renderPhotos = (fromScratch) => {
    /**
     * @description Updates the rover-photo-album element in the DOM with rover photos.
     * @param (bool) fromScratch - Boolean indicating if the element is being appended
     * <br>or overwritten.
    */
    const element = document.getElementById('rover-photos-album');
    const photos = getPhotos();
    if (fromScratch) {
        element.innerHTML = RoverPhotos(photos);
    } else {
        element.innerHTML += RoverPhotos(photos);
    }
};

const renderRoute = (route, state) => {
    // Returns HTML to render view
    return routes.get(route)(state);
};

const renderView = async (route, htmlDiv) => {
    const state = store;
    htmlDiv.innerHTML = await renderRoute(route, state);
};

const App = async () => {
    /**
     * @description Compiles components for view.
     * @param (immutable obj) state - The state of the application.
     * @returns (str) - html string to be rendered.
    */
    const rovers = getRovers();
    const rover = getRover();
    const roverCams = getRoverCams();
    const camera = getCam();
    const photos = getPhotos();
    const navBar = NavBar(rovers);
    const banner = rover ? Banner(RoverBanner, rover): Banner(HomeBanner);
    const filterBar = roverCams ? FilterBar(roverCams, camera): '';
    
    // const roverPhotos = rover ? RoverPhotosAlbum(photos): '';
    const main = photos ? Main(RoverPhotosAlbum, photos): Main(ChooseRover, rovers);
    return `
        <header>
            <section id="nav-bar">${navBar}</section>
            <section id="banner">${banner}</section>
            <section id="filter-bar">${filterBar}</section>
        </header>
        <main>
           <section>${main}</section>
        </main>
        <footer></footer>
    `;
};


// Listen for load and hashchange events to trigger appropriate routing--
window.addEventListener('load', () => {
    // Reset Store
    resetStore();
    pushToStore(setStartState());

    // Set Rover Routes
    resetRoutes();
    pushToRoutes(setHomeRoute(), setRoverRoutes(getRovers()));
    
    // Render View
    const hash = window.location.hash;
    const route = hash ? hash: '#';
    renderView (route, root);

});

window.addEventListener('hashchange', () => {
    // Reset Store
    resetStore();
    pushToStore(setStartState());
    
    // Render View
    const hash = window.location.hash;
    const route = hash ? hash: '#';
    renderView (route, root);
});


// Components -----------------------------------------------------------
const NavBar = (rovers) => {
    /**
     * @description Creates NavBar component
     * @param (immutable obj) rovers - The immutable list containing the availible rovers.
     * @returns (str) - html string to be rendered.
    */
    const htmlNavItemString = rovers.reduce((htmlString, currentRover) => {
        return htmlString += `
        <li class="nav-item">
            <a class="nav-link" href="#${currentRover.toLowerCase()}">${currentRover}<span class="sr-only">(current)</span></a>
        </li>
        `;
    }, '');
   
    return `
        <nav class="navbar navbar-expand-md navbar-dark bg-dark">
            <div class="container">
                <a class="navbar-brand" href="#">Mars Rovers</a>
                <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navItems" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>        
                <div class="collapse navbar-collapse" id="navItems">
                    <ul class="navbar-nav ml-auto">
                        ${htmlNavItemString}
                    </ul>
                </div>
            </div>
        </nav>`;
};

const Banner = (BannarComponent, data=null) => {
    return  `
        <div class="jumbotron text-center">
            <div class="container">
                ${BannarComponent(data)}     
            </div>   
        </div> 
    `;
};

const HomeBanner = () => {
    return `
        <h1>Mars Rover Photo Dashboard</h1>
        <p>live status and photos for the rovers exploring the red planet</p> 
    `;
};

const RoverBanner = (rover) => {
    return `
        <h1>${rover.get('name')}</h1>
        <p class="rover-manifest-data">Launched: ${rover.get('launch_date')} | Landed: ${rover.get('landing_date')} | Status: ${rover.get('status')}<br>Max Date: ${rover.get('max_date')} | Max Sol: ${rover.get('max_sol')} | Total Photos: ${rover.get('total_photos')}</p>
    `;
};

const FilterBar = (roverCameras) => {
    /**
     * @description Creates photo filter bar.
     * @param (immutable obj) roverCameras - The immutable map containing the rover camera information.
     * @returns (str) - html string to be rendered.
    */
    const htmlCameraString = roverCameras.reduce((htmlString, currentCamera) => {
        return htmlString += `<div class="dropdown-item camera-filter-item" id="${currentCamera.get('abbr')}">${currentCamera.get('name')}</div>`;
    }, '<div class="dropdown-item camera-filter-item active" id="all">All</div>');

    return `
        <nav class="navbar navbar-expand-sm navbar-dark bg-dark">
            <div class="container">
                <div class="navbar-brand">Filters</div>
                <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#filterItems" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
                </button>            
                <div class="collapse navbar-collapse" id="filterItems">                
                    <ul class="navbar-nav mr-auto">                        
                        <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle" href="#" id="filterDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">Cameras</a>
                        <div class="dropdown-menu" aria-labelledby="filterDropdown">
                            ${htmlCameraString}
                        </div>                        
                    </ul>
                </div>
            </div>
        </nav>
    `;
};

const Main = (MainComponent, data) => {
    return `
        <div class="container">
            ${MainComponent(data)}
        </div>
    `;
};

const ChooseRover = (rovers) => {
    const roverInfo = rovers.reduce((htmlString, currentRover) => {
        return  htmlString += `
            <div class="col-md-4">
                <div class="home-rover-grid-item card">
                    <img src="/assets/images/${currentRover}.jpg" class="card-img-top" alt="${currentRover}">
                    <div class="card-body">
                        <h5 class="card-title">${currentRover}</h5>
                        <button class="btn btn-secondary rover-link-landing" value="${currentRover.toLowerCase()}">View Images »</button>
                    </div>
                </div>
            </div>
        `;
    }, '');

    return `
        <div class="home-rover-grid">
            <div class="row">
                ${roverInfo}
            </div>
        </div>
    `;
};

const RoverPhotosAlbum = (photos) => {
    /**
     * @description Creates photo album.
     * @param (immutable obj) photos - The immutable map containing the rover photos.
     * @returns (str) - html string to be rendered.
    */
    return `
        <div class="album">
            <div class="container">
                <div class="row row-cols-1 row-cols-sm-1 row-cols-md-3 row-cols-lg-4" id="rover-photos-album">
                ${RoverPhotos(photos)}                
                </div>
            </div>
        </div>
    `;
};

const RoverPhotos = (photos) => {
    /**
     * @description Creates photos in photo album
     * @param (immutable obj) photos - The immutable map containing the rover photos.
     * @returns (str) - html string to be rendered.
    */
    const startIdx = photos.size - (photos.size % 25 === 0 ? 25 : photos.size % 25);
    return photos.reduce((htmlString, currentPhoto, idx) => {
        if (idx >= startIdx) {
            return htmlString += `
                <div class="col mb-3">
                    <div class="card h-100">
                        <div class="card-img-frame">
                            <img src="${currentPhoto.get('img_src')}" class="card-img-top" alt="${currentPhoto.getIn(['rover', 'name'])} photo ${currentPhoto.get('id')} from ${currentPhoto.getIn(['camera', 'full_name'])}">
                        </div>               
                        <div class="card-body">
                            <ul>
                                <li>Camera: ${currentPhoto.getIn(['camera', 'full_name'])}</li>
                                <li>Sol: ${currentPhoto.get('sol')}</li>
                                <li>Earth Date: ${currentPhoto.get('earth_date')}
                            </ul>
                        </div>
                    </div>
                </div>
            `;
        }
        return '';
    }, '');
};
    

// MODEL: API calls to access data
// Express API Calls ----------------------------------------------------
const fetchData = async (url, body) => {
    /**
     * @description API call to express backend to query for manifest information or photo information.
     * @param (str) url - The endpoint of the api.
     * @param (obj) body - The data to be passed to the server.
     * @returns (obj) - Requested data from the server.
    */
    const response = await fetch(`http://localhost:3000${url}`, {
        method: 'POST',
        headers: {
            "Content-Type": "application/json"
        },
        body: JSON.stringify(body)
    });

    if (!response.ok) {
        console.log('error');
        throw new Error(`HTTP error! status: ${response.status}`);
    } else {
        return response.json();
    }
};